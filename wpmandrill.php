<?php
/* 
Plugin Name: wpMandrill
Description: wpMandrill sends emails, generated by WordPress using Mandrill.
Author: Mandrill
Author URI: http://mandrillapp.com/
Plugin URI: http://connect.mailchimp.com/integrations/wpmandrill
Version: 1.08
Text Domain: wpmandrill
 */

wpMandrill::on_load();

class wpMandrill {
    const WPDOMAIN = 'wpmandrill';
    const DEBUG = false;
    
	static $settings;
	static $report;
	static $stats;
    static $mandrill;
    static $conflict;
    static $error;
    
	static function on_load() {
	
        if ( !self::DEBUG ) {
            ini_set( "display_errors", 0);
        }
        
		define('WPMANDRILL_API_VERSION', '1.0');

		add_action('admin_init', array(__CLASS__, 'adminInit'));
		add_action('admin_menu', array(__CLASS__, 'adminMenu'));

		add_filter('contextual_help', array(__CLASS__, 'showContextualHelp'), 10, 3);
		
		add_action('admin_print_footer_scripts', array(__CLASS__,'openContextualHelp'));
        add_action('wp_ajax_get_mandrill_stats', array(__CLASS__,'getAjaxStats'));
        add_action('wp_ajax_get_dashboard_widget_stats', array(__CLASS__,'showDashboardWidget'));
        
		load_plugin_textdomain(self::WPDOMAIN, false, dirname( plugin_basename( __FILE__ ) ).'/lang');

		try {
		
		    require_once( plugin_dir_path( __FILE__ ) . '/lib/mandrill.class.php');
		    $api_key = self::getAPIKey();
		    if ( $api_key && !isset(self::$mandrill) ) self::$mandrill = new Mandrill($api_key);
		    
		} catch ( Exception $e ) {}

		if( function_exists('wp_mail') ) {
            self::$conflict = true;
            add_action('admin_notices', array(__CLASS__, 'adminNotices'));
			return;
		}
		
        self::$conflict = false;
		if( self::isReady() ) {

			function wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {

				try {

					$sent = wpMandrill::mail( $to, $subject, $message, $headers, $attachments );
					
					if (    is_wp_error($sent) 
					        || !isset($sent[0]['status']) 
					        || ( isset($sent[0]['status']) && 'sent' != $sent[0]['status'] ) ) {
					        
                        return wpMandrill::wp_mail_native( $to, $subject, $message, $headers, $attachments );
                    }

					return true;					
				} catch ( Exception $e ) {
					return wpMandrill::wp_mail_native( $to, $subject, $message, $headers, $attachments );
				}
			}
		}
		
	}
	
	/**
	 * Sets up options page and sections.
	 */
	static function adminInit() {
		
		add_filter('plugin_action_links',array(__CLASS__,'showPluginActionLinks'), 10,5);
		add_action('admin_enqueue_scripts', array(__CLASS__,'showAdminEnqueueScripts'));
		
		register_setting(self::WPDOMAIN, self::WPDOMAIN, array(__CLASS__,'formValidate'));

		// SMTP Settings
		add_settings_section('wpmandrill-api', __('API Settings', self::WPDOMAIN), '__return_false', self::WPDOMAIN);
		add_settings_field('api-key', __('API Key', self::WPDOMAIN), array(__CLASS__, 'askAPIKey'), self::WPDOMAIN, 'wpmandrill-api');
		
		if( self::isConnected() ) {
            add_action('wp_dashboard_setup', array( __CLASS__,'addDashboardWidgets') );
            
			// Verified Addresses
			add_settings_section('wpmandrill-addresses', __('Sender Settings', self::WPDOMAIN), '__return_false', self::WPDOMAIN);
			add_settings_field('from-name', __('FROM Name', self::WPDOMAIN), array(__CLASS__, 'askFromName'), self::WPDOMAIN, 'wpmandrill-addresses');
			add_settings_field('from-email', __('FROM Email', self::WPDOMAIN), array(__CLASS__, 'askFromEmail'), self::WPDOMAIN, 'wpmandrill-addresses');

			// Template
			add_settings_section('wpmandrill-templates', __('General Template', self::WPDOMAIN), '__return_false', self::WPDOMAIN);
			add_settings_field('template', __('&nbsp;', self::WPDOMAIN), array(__CLASS__, 'askTemplate'), self::WPDOMAIN, 'wpmandrill-templates');
			
			// Tags
			add_settings_section('wpmandrill-tags', __('General Tags', self::WPDOMAIN), '__return_false', self::WPDOMAIN);
			add_settings_field('tags', __('&nbsp;', self::WPDOMAIN), array(__CLASS__, 'askTags'), self::WPDOMAIN, 'wpmandrill-tags');
			
			if ( self::isReady() ) {
			    // Email Test
			    register_setting('wpmandrill-test', 'wpmandrill-test', array(__CLASS__, 'sendTestEmail'));
			    
			    add_settings_section('mandrill-email-test', __('Send a test email using these settings', self::WPDOMAIN), '__return_false', 'wpmandrill-test');
			    add_settings_field('email-to', __('Send to', self::WPDOMAIN), array(__CLASS__, 'askTestEmailTo'), 'wpmandrill-test', 'mandrill-email-test');
			    add_settings_field('email-subject', __('Subject', self::WPDOMAIN), array(__CLASS__, 'askTestEmailSubject'), 'wpmandrill-test', 'mandrill-email-test');
			    add_settings_field('email-message', __('Message', self::WPDOMAIN), array(__CLASS__, 'askTestEmailMessage'), 'wpmandrill-test', 'mandrill-email-test');
            }
            
		}
	}

	/**
	 * Creates option page's entry in Settings section of menu.
	 */
	static function adminMenu() {

		self::$settings = add_options_page( 
		                            __('Mandrill Settings', self::WPDOMAIN), 
		                            __('Mandrill', self::WPDOMAIN), 
		                            'manage_options', 
		                            self::WPDOMAIN, 
		                            array(__CLASS__,'showOptionsPage')
		                        );
        
		if( self::isConnected() ) {
			self::$report = add_dashboard_page( 
		                            __('Mandrill Reports', self::WPDOMAIN),
		                            __('Mandrill Reports', self::WPDOMAIN),
		                            'manage_options',
		                            self::WPDOMAIN.'-reports', 
		                            array(__CLASS__,'showReportPage')
		                        );
			if ( self::isPluginPage('-reports') ) {
	            wp_register_script('highcharts', plugins_url('/js/highcharts.js', __FILE__), array('jquery'), null, true);
		        wp_register_script('mandrill-report-export', plugins_url("js/modules/exporting.js", __FILE__), array('highcharts'), null, true);
                wp_enqueue_script('highcharts');
        	    wp_enqueue_script('mandrill-report-export');
	        }
		}
	
		wp_register_style( 'mandrill_stylesheet', plugins_url('/css/mandrill.css', __FILE__) );
            wp_enqueue_style( 'mandrill_stylesheet' );
        wp_register_script('mandrill', plugins_url('/js/mandrill.js', __FILE__), array(), null, true);
            wp_enqueue_script('mandrill');
	}
	

    static function adminNotices() {    	
        if ( self::$conflict ) {
            echo '<div class="error"><p>'.__('Mandrill: wp_mail has been declared by another process or plugin, so you won\'t be able to use Mandrill until the problem is solved.', self::WPDOMAIN) . '</p></div>';
        }
    }

	static function showAdminEnqueueScripts($hook_suffix) {		
		if( $hook_suffix == self::$report && self::isReady() ) {
		    wp_register_script('mandrill-report-theme', plugins_url("js/themes/gray.js", __FILE__), array(''), null, true);
		    wp_register_script('mandrill-report-script', plugins_url("js/mandrill.js", __FILE__), array('highcharts'), null, true);
		    wp_register_script('mandrill-report-export', plugins_url("js/modules/exporting.js", __FILE__), array('highcharts'), null, true);
		    
		    wp_enqueue_script('mandrill-report-script');
		    wp_enqueue_script('mandrill-report-theme');
		}
	}

	/**
	 * Generates source of contextual help panel.
	 */
	static function showContextualHelp($contextual_help, $screen_id, $screen) {		
		if ($screen_id == self::$settings) {
		    $dir = dirname( plugin_basename( __FILE__ ) ).'/images';
		    
		    $ok = array();
            $ok['account'] = ( !self::getAPIKey() )           ? ' class="missing"' : '';
            $ok['domains'] = ( !self::ListVerifiedDomains() ) ? ' class="missing"' : '';
            $ok['email']   = ( !self::getFromEmail() )        ? ' class="missing"' : '';

            $requirements  = '';
            if ($ok['account'] . $ok['domains'] . $ok['email'] != '' ) {
                $requirements = '<p>' . __('To use this plugin you will need:', self::WPDOMAIN) . '</p>'
					. '<ol>'
					. '<li'.$ok['account'].'>'. __('Your Mandrill account.', self::WPDOMAIN) . '</li>'
					. '<li'.$ok['domains'].'>' . __('At least one domain defined in your Mandrill account.', self::WPDOMAIN) . '</li>'
					. '<li'.$ok['email'].'>' . __('A valid sender email address.', self::WPDOMAIN) . '</li>'
					. '</ol>';
            }
            
			return $requirements 
					. '<p>' . __('Once you have properly configured the settings, the plugin will take care of all the emails sent through your WordPress installation.', self::WPDOMAIN).'</p>'
					. '<p>' . __('However, if you need to customize any part of the email before sending, you can do so by using the WordPress filter <strong>mandrill_payload</strong>.', self::WPDOMAIN).'</p>'
					. '<p>' . __('This filter has the same structure as Mandrill\'s API call <a href="http://mandrillapp.com/api/docs/messages.html#method=send" target="_blank">/messages/send</a>, except that it can have one additional parameter when the email is based on a template. The parameter is called "<em>template</em>", which is an associative array of two elements (the first element, a string whose key is "<em>template_name</em>", and a second parameter whose key is "<em>template_content</em>". Its value is an array with the same structure of the parameter "<em>template_content</em>" in the call <a href="http://mandrillapp.com/api/docs/messages.html#method=send-template" target="_blank">/messages/send-template</a>.)', self::WPDOMAIN).'</p>'
					. '<p>' . __('Note that if you\'re sending additional headers in your emails, the only valid headers are <em>From:</em>, <em>Reply-To:</em>, and <em>X-*:</em>. <em>Bcc:</em> is also valid, but Mandrill will send the blind carbon copy to only the first address, and the remaining will be silently discarted.', self::WPDOMAIN).'</p>'
					. '<p>' . __('Also note that if any error occurs while sending the email, the plugin will try to send the message again using the native WordPress mailing capabilities.', self::WPDOMAIN).'</p>'
					. '<p>' . __('Confirm that any change you made to the payload is in line with the <a href="http://mandrillapp.com/api/docs/" target="_blank">Mandrill\'s API\'s documentation</a>. Also, the <em>X-*:</em> headers, must be in line with the <a href="http://help.mandrill.com/customer/portal/articles/456744-smtp-headers-api" target="_blank">SMTP API documentation</a>. By using this plugin, you agree that you and your website will adhere to <a href="http://mandrill.com/legal/terms/" target="_blank">Mandrill\'s Terms of Use</a>.', self::WPDOMAIN).'</p>'
					. '<p>' . __('if you have any question about Mandrill or this plugin, visit the <a href="http://help.mandrill.com/" target="_blank">Mandrill\'s Support Center</a>.', self::WPDOMAIN).'</p>'
					;
		}

		return $contextual_help;
	}

	/**
	 * Adds link to settings page in list of plugins
	 */
	static function showPluginActionLinks($actions, $plugin_file) {		
		static $plugin;

		if (!isset($plugin))
			$plugin = plugin_basename(__FILE__);

		if ($plugin == $plugin_file) {

			$settings = array('settings' => '<a href="options-general.php?page=wpmandrill">' . __('Settings', self::WPDOMAIN) . '</a>');
			
			if ( self::isReady() ) {
    			$report = array('report' => '<a href="index.php?page=wpmandrill-reports">' . __('Reports', self::WPDOMAIN) . '</a>');
    			$actions = array_merge($settings, $actions, $report);
            } else {
    			$actions = array_merge($settings, $actions);
            }
			
		}
		
		return $actions;
	}

	/**
	 * Generates source of options page.
	 */
	static function showOptionsPage() {		
		if (!current_user_can('manage_options'))
			wp_die( __('You do not have sufficient permissions to access this page.') );
            
            if ( isset($_GET['show']) && $_GET['show'] == 'how-tos' ) {
                self::showHowTos();
                return;
            }
		?>
<div class="wrap">
    <div class="icon32" style="background: url('<?php echo plugins_url('images/mandrill-head-icon.png',__FILE__); ?>');"><br /></div>
    <h2><?php _e('Mandrill Settings', self::WPDOMAIN); ?> <small><a href="options-general.php?page=<?=self::WPDOMAIN; ?>&show=how-tos">view how-tos</a></small></h2>
    
    <div style="float: left;width: 70%;">
        <form method="post" action="options.php">
        
            <div class="stuffbox">
                <?php settings_fields(self::WPDOMAIN); ?>
                <?php do_settings_sections(self::WPDOMAIN); ?>
            </div>    
        
            <p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p>
        </form>
    

        <?php if( self::isReady() ) { ?>
        <form method="post" action="options.php">
            <div class="stuffbox" style="max-width: 90% !important;">
                <?php settings_fields('wpmandrill-test'); ?>
                <?php do_settings_sections('wpmandrill-test'); ?>
            </div>

            <p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php _e('Send Email', self::WPDOMAIN) ?>" /></p>
        </form>
        <?php } ?>
                
    </div>
    
	<div style="float: left;width: 20%;">
	    <?php
            $rss        = fetch_feed('http://mandrill.com/blog/feed');
            $maxitems   = 0;
            if (!is_wp_error( $rss ) ) {
                $maxitems = $rss->get_item_quantity(5); 
                $rss_items = $rss->get_items(0, $maxitems); 
            }
            
            if ( $maxitems > 0 ) {
        ?>	    
	    <div class="news mandrill">
		    <h3 class="news_header"><?php _e('Latest from Mandrill...', self::WPDOMAIN); ?></h3>
            <ul>
                <?php
                foreach ( $rss_items as $item ) { ?>
                <li>
                    <a href='<?php echo esc_url( $item->get_permalink() ); ?>'
                    title='<?php echo 'Posted '.$item->get_date('j F Y | g:i a'); ?>'>
                    <?php echo esc_html( $item->get_title() ); ?></a>
                </li>
                <?php } ?>
            </ul>
        </div>
        <?php } ?>
	    <div class="news">
		    <h3 class="news_header"><?php _e('News from MailChimp...', self::WPDOMAIN); ?></h3><?php
            $rss = fetch_feed('http://mailchimp.com/blog/feed');
            if (!is_wp_error( $rss ) ) {
                $maxitems = $rss->get_item_quantity(5); 
                $rss_items = $rss->get_items(0, $maxitems); 
            } ?>
            <ul>
                <?php if ($maxitems == 0) echo '<li>No news!</li>';
                else
                foreach ( $rss_items as $item ) { ?>
                <li>
                    <a href='<?php echo esc_url( $item->get_permalink() ); ?>'
                    title='<?php echo 'Posted '.$item->get_date('j F Y | g:i a'); ?>'>
                    <?php echo esc_html( $item->get_title() ); ?></a>
                </li>
                <?php } ?>
            </ul>
        </div>
	</div>	
</div>
		<?php
	}

	static function showHowTos() {		
		?>
<div class="wrap">
    <div class="icon32" style="background: url('<?php echo plugins_url('images/mandrill-head-icon.png',__FILE__); ?>');"><br /></div>
    <h2><?php _e('Mandrill How-Tos', self::WPDOMAIN); ?> <small><a href="options-general.php?page=<?=self::WPDOMAIN; ?>">back to settings</a></small></h2>
        <?php
    		require plugin_dir_path( __FILE__ ) . '/how-tos.php';
    		
            echo wpMandrill_HowTos::show('intro');
            echo wpMandrill_HowTos::show('auto');
            echo wpMandrill_HowTos::show('regular');
            echo wpMandrill_HowTos::show('filter');
            echo wpMandrill_HowTos::show('direct');
            
        ?>
    </div>
		<?php
	}

	static function showReportPage() {		
		require plugin_dir_path( __FILE__ ) . '/stats.php';
	}
	
	/**
	 * Processes submitted settings from.
	 */
	static function formValidate($input) {
        if ( !empty($input['from_domain']) && ( empty($input['from_username']) || !self::isDomainEnabled($input['from_domain']) ) ) {
            add_settings_error(  
                                self::WPDOMAIN,
                                'from-email',
                                __('You must define a valid sender email.', self::WPDOMAIN),
                                'error'
            );
            
            
            $input['from_username'] = '';
            $input['from_domain'] = '';
        }
        
		return array_map('wp_strip_all_tags', $input);
	}

	/**
	 * Opens contextual help section.
	 */
	static function openContextualHelp() {
		if ( !self::isPluginPage() || self::isReady() )
			return;

		?>
<script type="text/javascript">
jQuery(document).bind( 'ready', function() {
    jQuery('a#contextual-help-link').trigger('click');
});
</script>
		<?php
	}

/******************************************************************
**  Helper functions
*******************************************************************


	/**
	 * @return mixed
	 */
	static function getOption( $name, $default = false ) {

		$options = get_option(self::WPDOMAIN);
        
		if( isset( $options[$name] ) )
			return $options[$name];

		return $default;
	}

	/**
	 * @return boolean
	 */
    static function isReady() {
    	return self::isConnected() && self::isConfigured();
    }

    /**
    * @return boolean
    */
    static function isConnected() {
    	$result = false;
    	 
    	if ( isset(self::$mandrill)) {
    		try {
    			$result = ( self::$mandrill->users_ping() == 'PONG!' );
    		} catch ( Exception $e) {}
    	}
    	return $result;
    }
    
    /**
    * @return boolean
    */
    static function isConfigured() {
    	return self::getAPIKey() && self::getFromEmail();
    }
    
	/**
	 * @return boolean
	 */
	static function setOption( $name, $value ) {

        $options = get_option(self::WPDOMAIN);

		$options[$name] = $value;

        $result = update_option(self::WPDOMAIN, $options);
        
        return $result;
	}

	/**
	 * @return string|boolean
	 */
	static function getAPIKey() {

		return self::getOption('api_key');
	}

	/**
	 * @return string|boolean
	 */
	static function getFromUsername() {

		return self::getOption('from_username');
	}
	
	/**
	 * @return string|boolean
	 */
	static function getFromDomain() {

		return self::getOption('from_domain');
	}
	
	/**
	 * @return string|boolean
	 */
	static function getFromEmail() {
		if ( self::getOption('from_username') && self::getOption('from_domain') ) {
			return self::getOption('from_username') . '@' . self::getOption('from_domain');
		}
	}

	/**
	 * @return string|boolean
	 */
	static function getFromName() {

		return self::getOption('from_name');
	}

	/**
	 * @return string|boolean
	 */
	static function getTemplate() {

		return self::getOption('template');
	}

	/**
	 * @return string|boolean
	 */
	static function getTags() {

		return self::getOption('tags');
	}

	/**
	 * @param string $subject
	 * @return array
	 */
	static function findTags($tags) {

        // Getting general tags
        $gtags   = array();
        
        $general_tags = self::getTags();
		if ( !empty( $general_tags ) ) {
		    $gtags   = explode("\n",$general_tags);		
		    foreach ( $gtags as $index => $gtag ) {
		        if ( empty($gtag) ) unset($gtags[$index]);
		    }
		    $gtags = array_values($gtags);
		}
		
		// Finding tags based on WP Backtrace 
		$trace  = debug_backtrace();
		$level  = 4;        
		$function = $trace[$level]['function'];

        $wtags = array();
		if( 'include' == $function || 'require' == $function ) {

			$file = basename($trace[$level]['args'][0]);
			$wtags[] = "wp_{$file}";
		}
		else {
			if( isset( $trace[$level]['class'] ) )
				$function = $trace[$level]['class'].$trace[$level]['type'].$function;
			$wtags[] = "wp_{$function}";
		}
		
		return array('user' => $tags, 'general' => $gtags, 'automatic' => $wtags);
	}

	/**
	 * @return boolean
	 */
	static function isPluginPage($sufix = '') {

		return ( isset( $_GET['page'] ) && $_GET['page'] == self::WPDOMAIN . $sufix);
	}

	/**
	 * Return the list of the verified domains for the current users. Or false.
	 *
	 * @return array|bool
	 */
	static function listVerifiedDomains() {
	    if ( !self::isConnected() ) return array();
	    
	    $domains = self::$mandrill->senders_domains();
	    if ( is_wp_error($domains) || empty($domains) ) return false;
	    /*
	    foreach ( $domains as $index => $domain ) {
	        if ( !$domains[$index]['is_enabled'] ) {
	            unset($domains[$index]);
		    }
        }
        */
	    return array_values($domains);
    }


	/**
	 * @return boolean
	 */
    static function isDomainEnabled($domain) {
        if ( empty($domain) ) return false;
        
        $domains = self::ListVerifiedDomains();
        foreach ( $domains as $curdomain )  {
            if ( $curdomain['domain'] == $domain ) {
                return true;
            }
        }
        
        return false;
    }
    
	/**
	 * @return boolean
	 */
    static function isTemplateValid($template) {
        if ( empty($template) || !self::isConnected() ) return false;
        
        $templates = self::$mandrill->templates_list();
        foreach ( $templates as $curtemplate )  {
            if ( $curtemplate['name'] == $template ) {
                return true;
            }
        }
        
        return false;
    }
    
	/**
	 * Processes submitted email test form.
	 */
	static function sendTestEmail($input) {

		if (isset($input['email_to']) && !empty($input['email_to'])) {

			$to = $input['email_to'];
			$subject = isset($input['email_subject']) ? $input['email_subject'] : '';
			$message = isset($input['email_message']) ? $input['email_message'] : '';

			$test = self::mail($to, $subject, $message);

			if (is_wp_error($test)) {

            	add_settings_error('email-to', 'email-to', __('Test email send failed. ', self::WPDOMAIN) . $test->get_error_message());

                return array_map('wp_strip_all_tags', $input);
                
            } else {
                $result = array();

                $result['sent'] = 0;
                $result['queue'] = 0;
                $result['rejected'] = 0;
                
                foreach ( $test as $email ) {
                    if ( !isset($result[$email['status']]) ) $result[$email['status']] = 0;
                    $result[$email['status']]++;
                }
                
                
				add_settings_error('email-to', 'email-to', sprintf(__('Test executed: %d emails sent, %d emails queued and %d emails rejected', self::WPDOMAIN), $result['sent'],$result['queue'],$result['rejected']), $result['sent'] ? 'updated' : 'error' );
            }
		}

		return array();
	}

	// Following methods generate parts of settings and test forms.
	static function askAPIKey() {
		echo '<div class="inside">';

		$api_key = self::getOption('api_key');
		?><input id='api_key' name='wpmandrill[api_key]' size='45' type='text' value="<?php esc_attr_e( $api_key ); ?>" /><?php
		
		if ( empty($api_key) ) {
		    ?><br/><span class="setting-description"><small><em><?php _e('To get your API key, please visit your <a href="http://mandrillapp.com/settings/index" target="_blank">Mandrill Settings</a>', self::WPDOMAIN); ?></em></small></span><?php
		} elseif ( self::isConnected() ) {
		    ?><br/><span class="setting-description"><small><em><?php _e('We are connected to your Mandrill Account.', self::WPDOMAIN); ?></em></small></span><?php
		} else {
		    ?><br/><span class="setting-description"><small><em><?php _e('Sorry, invalid API key.', self::WPDOMAIN); ?></em></small></span><?php
		}
		
		echo '</div>';
	}

	static function askFromEmail() {
		echo '<div class="inside">';

		$from_username  = self::getFromUsername();
		$from_domain    = self::getFromDomain();
		$from_email     = self::getFromEmail();

		$domains = self::ListVerifiedDomains();		
		if ( !$domains ) {

			_e('No domains found.', self::WPDOMAIN);

			if ( $from_email ) {
				self::setOption('from_username', false);
				self::setOption('from_domain', false);
				self::setOption('from_email', false);
            }
            
    		echo '</div>';
			return;
		}

		?><span class="setting-description"><em><?php _e('This address will be used as the sender of the outgoing emails:', self::WPDOMAIN); ?></em></span><br />
		<input id="from_username" name="wpmandrill[from_username]" type="text" value="<?php esc_attr_e($from_username);?>" style="text-align:right;width:100px">@
		<select id="from_domain" name="wpmandrill[from_domain]"><?php
		foreach( $domains as $curdomain ) {
			?><option value="<?php esc_attr_e($curdomain['domain']); ?>" <?php selected($curdomain['domain'], $from_domain); ?>><?php esc_html_e($curdomain['domain']); ?></option><?php 
		}
		?></select><br/><span class="setting-description"><small><em><?php _e('If you need to add a new domain, please visit your <a href="https://mandrillapp.com/settings/sending-domains" target="_blank">Mandrill Settings</a>', self::WPDOMAIN); ?></em></small></span><?php

		echo '</div>';
	}

	static function askFromName() {
		echo '<div class="inside">';

		$from_name  = self::getFromName();

		?><span class="setting-description"><em><?php _e('Name the recipients will see in their email clients:', self::WPDOMAIN); ?></em></span><br />
		<input name="wpmandrill[from_name]" type="text" value="<?php esc_attr_e($from_name); ?>">
		<?php
		
		echo '</div>';
	}

	static function askTemplate() {
		echo '<div class="inside">';
		
        if ( !self::isConnected() ) { 
        	_e('No templates found.', self::WPDOMAIN); 

        	echo '</div>';
			return;
        }
        
		$template  = self::getTemplate();
		$templates = self::$mandrill->templates_list();
		if( is_wp_error($templates) || empty($templates)) {

			_e('No templates found.', self::WPDOMAIN);

			if( $templates )
				self::setOption('templates', false);

    		echo '</div>';
			return;
		}

		?><span class="setting-description"><em><?php _e('Select the template to use:', self::WPDOMAIN); ?></em></span><br />
		<select name="wpmandrill[template]">
		<option value="">-None-</option><?php
		foreach( $templates as $curtemplate ) {
			?><option value="<?php esc_attr_e($curtemplate['name']); ?>" <?php selected($curtemplate['name'], $template); ?>><?php esc_html_e($curtemplate['name']); ?></option><?php 
		}
		?></select><br/><span class="setting-description"><em><?php _e('<small>The selected template must have a <strong><em>mc:edit="main"</em></strong> placeholder defined. The message will be shown there.</small>', self::WPDOMAIN); ?></em></span><?php

		echo '</div>';
	}

	static function askTags() {
		echo '<div class="inside">';

		$tags  = self::getTags();

		?><span class="setting-description"><em><?php _e('If there are tags that you want appended to every call, list them here, one per line:', self::WPDOMAIN); ?></em></span><br />
		<textarea name="wpmandrill[tags]" cols="25" rows="3"><?php echo $tags; ?></textarea><br/>
		<span class="setting-description"><small><em><?php _e('Also keep in mind that you can add or remove tags using the <em><a href="#" onclick="jQuery(\'a#contextual-help-link\').trigger(\'click\');return false;">mandrill_payload</a></em> WordPress filter.', self::WPDOMAIN); ?></em></small></span>
		<?php

		echo '</div>';
	}

    static function askTestEmailTo() {
		echo '<div class="inside">';
		?><input id='email_to' name='wpmandrill-test[email_to]' size='45' type='text' value="<?php esc_attr_e( self::getTestEmailOption('email_to') ); ?>"/><?php
		echo '</div>';
	}

	static function askTestEmailSubject() {
		echo '<div class="inside">';
		?><input id='email_subject' name='wpmandrill-test[email_subject]' size='45' type='text' value="<?php esc_attr_e( self::getTestEmailOption('email_subject') ); ?>" /><?php
		echo '</div>';
	}

	static function askTestEmailMessage() {
		echo '<div class="inside">';
		?><textarea rows="5" cols="45" name="wpmandrill-test[email_message]" ><?php esc_html_e( self::getTestEmailOption('email_message') ); ?></textarea><?php
		echo '</div>';
	}

	/**
	 * @param  string $field
	 * @return string|bool
	 */
    static function getTestEmailOption($field) {

        if ( function_exists('is_multisite') && is_multisite() )
        	$email = get_site_option(self::WPDOMAIN . '-test');
        else
    		$email = get_option(self::WPDOMAIN . '-test');

        if( isset( $email[$field] ) )
            return $email[$field];

        return false;
    }


/******************************************************************
**  Stats-related functions
*******************************************************************/

	/**
	 * @return array
	 */
    static function GetRawStatistics() {
	    if ( !self::isConnected() ) return array();
	    
        $stats = array();
        $final = array();
        
        $stats['user']      = self::$mandrill->users_info();
        
        $data = array();
            $container          = self::$mandrill->tags_list();
            foreach ( $container as $tag ) {
                $data[$tag['tag']] = self::$mandrill->tags_info($tag['tag']);
            }
            $stats['tags']      = $data;
        
        $data = array();
            $container        = self::$mandrill->senders_list();
            foreach ( $container as $sender ) {
                $data[$sender['address']] = self::$mandrill->senders_info($sender['address']);
            }
            $stats['senders']   = $data;
            
        $stats['urls']      = self::$mandrill->urls_list();
        
        
        $final['general']   = $stats['user'];
        $final['urls']      = $stats['urls'];
        
        $final['stats']   = array();
        $final['stats']['hourly']['senders']   = array();;
        $final['stats']['hourly']['tags']      = array();
        
        $final['general']['stats'] = $final['general']['stats']['all_time'];
        $final['stats']['hourly']['tags']['general_stats'] = self::$mandrill->tags_all_time_series();
        
        foreach ( array('today', 'last_7_days','last_30_days','last_60_days','last_90_days') as $timeframe) {
            if ( isset($stats['user']['stats'][$timeframe]) ) $final['stats']['periods']['account'][$timeframe] = $stats['user']['stats'][$timeframe];
            
            foreach ($stats['tags'] as $index => $entity) {
                if ( !in_array($entity['tag'], $final['stats']['hourly']['tags']) ) 
                    $final['stats']['hourly']['tags']['detailed_stats'][$entity['tag']] = self::$mandrill->tags_time_series($entity['tag']);
                
                if ( isset($entity['stats'][$timeframe]) ) 
                    $final['stats']['periods']['tags'][$timeframe][$index] = $entity['stats'][$timeframe];
                
            }
            
            foreach ($stats['senders'] as $index => $entity) {
                if ( !in_array($entity['address'], $final['stats']['hourly']['senders']) ) 
                    $final['stats']['hourly']['senders'][$entity['address']] = self::$mandrill->senders_time_series($entity['address']);
                if ( isset($entity['stats'][$timeframe]) ) 
                    $final['stats']['periods']['senders'][$timeframe][$index] = $entity['stats'][$timeframe];
            }
        }
        
        return $final;
    }

	static function getProcessedStats() {	
        $stats = self::GetRawStatistics();
        if ( empty($stats) ) return $stats;
		
        $graph_data = array();
        for ( $i = 0; $i < 24; $i++ ) {
            $graph_data['hourly']['delivered'][ sprintf('"%02s"',$i) ]          = 0;
            $graph_data['hourly']['opens'][ sprintf('"%02s"',$i) ]              = 0;
            $graph_data['hourly']['clicks'][ sprintf('"%02s"',$i) ]             = 0;
            
            $graph_data['hourly']['open_rate'][ sprintf('"%02s"',$i) ]          = 0;
            $graph_data['hourly']['click_rate'][ sprintf('"%02s"',$i) ]         = 0;
        }

        for ( $i = 29; $i >= 0; $i-- ) {
            $day = date('m/d', strtotime ( "-$i day" , time() ) );
            
            $graph_data['daily']['delivered'][ sprintf('"%02s"',$day) ]          = 0;
            $graph_data['daily']['opens'][ sprintf('"%02s"',$day) ]              = 0;
            $graph_data['daily']['clicks'][ sprintf('"%02s"',$day) ]             = 0;
            
            $graph_data['daily']['open_rate'][ sprintf('"%02s"',$day) ]          = 0;
            $graph_data['daily']['click_rate'][ sprintf('"%02s"',$day) ]         = 0;
        }

        $timeOffset = get_option('gmt_offset');
        $timeOffset = is_numeric($timeOffset) ? $timeOffset * 3600 : 0;
        
        foreach ( $stats['stats']['hourly']['senders'] as $data_by_sender ) {
            foreach ( $data_by_sender as $data ) {
                if ( isset($data['time']) ) {
                    $hour = '"' . date('H',strtotime($data['time'])+$timeOffset) . '"';
                    $day  = '"' . date('m/d', strtotime($data['time'])+$timeOffset) . '"';
                    
                    if ( !isset($graph_data['hourly']['delivered'][$hour]) )    $graph_data['hourly']['delivered'][$hour]   = 0;
                    if ( !isset($graph_data['hourly']['opens'][$hour]) )        $graph_data['hourly']['opens'][$hour]       = 0;
                    if ( !isset($graph_data['hourly']['clicks'][$hour]) )       $graph_data['hourly']['clicks'][$hour]      = 0;
                    
                    if ( !isset($graph_data['daily']['delivered'][$day]) )     $graph_data['daily']['delivered'][$day]   = 0;
                    if ( !isset($graph_data['daily']['opens'][$day]) )         $graph_data['daily']['opens'][$day]       = 0;
                    if ( !isset($graph_data['daily']['clicks'][$day]) )        $graph_data['daily']['clicks'][$day]      = 0;
                    
                    $graph_data['hourly']['delivered'][$hour] += $data['sent'] - $data['hard_bounces'] - $data['soft_bounces']  - $data['rejects'];
                    $graph_data['hourly']['opens'][$hour]     += $data['unique_opens'];
                    $graph_data['hourly']['clicks'][$hour]    += $data['unique_clicks'];

                    $graph_data['daily']['delivered'][$day] += $data['sent'] - $data['hard_bounces'] - $data['soft_bounces']  - $data['rejects'];
                    $graph_data['daily']['opens'][$day]     += $data['unique_opens'];
                    $graph_data['daily']['clicks'][$day]    += $data['unique_clicks'];
                }
            }
        }

        foreach (array_keys($graph_data['hourly']['delivered']) as $hour ) {
        
            if ($graph_data['hourly']['delivered'][$hour]) {
                if ( !isset($graph_data['hourly']['opens'][$hour]) ) $graph_data['hourly']['opens'][$hour] = 0;
                if ( !isset($graph_data['hourly']['clicks'][$hour]) ) $graph_data['hourly']['clicks'][$hour] = 0;
                
                $graph_data['hourly']['open_rate'][$hour]  = number_format($graph_data['hourly']['opens'][$hour] * 100 / $graph_data['hourly']['delivered'][$hour],2);
                $graph_data['hourly']['click_rate'][$hour] = number_format($graph_data['hourly']['clicks'][$hour] * 100 / $graph_data['hourly']['delivered'][$hour],2);
            }
        }

        foreach (array_keys($graph_data['daily']['delivered']) as $day ) {
            if ($graph_data['daily']['delivered'][$day]) {
                if ( !isset($graph_data['daily']['opens'][$day]) ) $graph_data['daily']['opens'][$day] = 0;
                if ( !isset($graph_data['daily']['clicks'][$day]) ) $graph_data['daily']['clicks'][$day] = 0;
                
                $graph_data['daily']['open_rate'][$day]  = number_format($graph_data['daily']['opens'][$day] * 100 / $graph_data['daily']['delivered'][$day],2);
                $graph_data['daily']['click_rate'][$day] = number_format($graph_data['daily']['clicks'][$day] * 100 / $graph_data['daily']['delivered'][$day],2);
            }
            
        }
		
		$stats['graph'] = $graph_data;
		
		return $stats;
	}

    static function getCurrentStats() {
    
        $stats = get_transient(self::WPDOMAIN.'-stats');
        if ( empty($stats) ) {
        
	        $stats = self::GetProcessedStats();
	        if ( !empty($stats) ) set_transient(self::WPDOMAIN.'-stats', $stats, 60 * 60);
	        
        }
        
        return $stats;
    }

	static function addDashboardWidgets() {
        $widget_id      = 'mandrill_widget';
        
		$widget_options = get_option('dashboard_widget_options');

        if ( !$widget_options || !isset($widget_options[$widget_id])) { 
            $filter     = 'none';
            $display    = 'volume';
        } else {

            $filter     = $widget_options[$widget_id]['filter'];
            $display    = $widget_options[$widget_id]['display'];
        }
        
        if ( $filter == 'none' ) {
            $filter_used = '';
        } elseif ( substr($filter,0,2) == 's:' ) {
            $filter = substr($filter,2);
            $filter_used = 'Sender: '.$filter;
        } else {
            $filter_used = 'Tag: '.$filter;
        }
        	
		wp_add_dashboard_widget(    "mandrill_widget", 
		                            __("Mandrill Recent Statistics", self::WPDOMAIN) . (!empty($filter_used) ? ' &raquo; ' . $filter_used : ''), 
		                            array(__CLASS__, 'showDashboardWidget'), 
		                            array(__CLASS__, 'showDashboardWidgetOptions')
		                       );
		
        global $wp_meta_boxes;

	    $normal_dashboard = $wp_meta_boxes['dashboard']['normal']['core'];
	    
	    $backup = array('mandrill_widget' => $normal_dashboard['mandrill_widget']);
	    unset($normal_dashboard['mandrill_widget']);

	    $sorted_dashboard = array_merge($backup, $normal_dashboard);

	    $wp_meta_boxes['dashboard']['normal']['core'] = $sorted_dashboard;
    } 

    static function showDashboardWidget() {
        $isAjaxCall = isset($_POST['ajax']) && $_POST['ajax'] ? true : false;
        
        $widget_id      = 'mandrill_widget';
		$widget_options =      get_option('dashboard_widget_options');
        
        if ( !$widget_options || !isset($widget_options[$widget_id])) { 
            $filter     = 'none';
            $display    = 'volume';
        } else {

            $filter     = $widget_options[$widget_id]['filter'];
            $display    = $widget_options[$widget_id]['display'];
        }
        
        $stats = array();
        if ( $filter == 'none' ) {
            $filter_type = 'account';
            $filter_used = '';

            $data      = self::$mandrill->users_info();
            $stats['stats']['periods']['account']['today'] = $data['stats']['today'];
            $stats['stats']['periods']['account']['last_7_days'] = $data['stats']['last_7_days'];
            
        } elseif ( substr($filter,0,2) == 's:' ) {
            $filter_type = 'senders';
            $filter = substr($filter,2);
            $filter_used = 'Filtering by sender: '.$filter;

            $data      = self::$mandrill->senders_info($filter);
            $stats['stats']['periods']['senders']['today'][$filter]         = $data['stats']['today'];
            $stats['stats']['periods']['senders']['last_7_days'][$filter]   = $data['stats']['last_7_days'];
        } else {
            $filter_type = 'tags';
            $filter_used = 'Filtering by tag: '.$filter;

            $data      = self::$mandrill->tags_info($filter);
            $stats['stats']['periods']['tags']['today'][$filter]            = $data['stats']['today'];
            $stats['stats']['periods']['tags']['last_7_days'][$filter]      = $data['stats']['last_7_days'];
        }
        
        $data = array();
        foreach ( array('today', 'last_7_days') as $period ) {
            if ( $filter_type == 'account' ) {
                $data['sent'][$period]     = $stats['stats']['periods'][$filter_type][$period]['sent'];
                $data['opens'][$period]     = $stats['stats']['periods'][$filter_type][$period]['unique_opens'];
                $data['bounces'][$period]   = $stats['stats']['periods'][$filter_type][$period]['hard_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period]['soft_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period]['rejects'];
                                                
                $data['unopens'][$period]   = $stats['stats']['periods'][$filter_type][$period]['sent'] - 
                                                $data['opens'][$period] - 
                                                $data['bounces'][$period];
            } else {
                $data['sent'][$period]     = $stats['stats']['periods'][$filter_type][$period][$filter]['sent'];
                $data['opens'][$period]     = $stats['stats']['periods'][$filter_type][$period][$filter]['unique_opens'];
                $data['bounces'][$period]   = $stats['stats']['periods'][$filter_type][$period][$filter]['hard_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period][$filter]['soft_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period][$filter]['rejects'];
                                                
                $data['unopens'][$period]   = $stats['stats']['periods'][$filter_type][$period][$filter]['sent'] - 
                                                $data['opens'][$period] - 
                                                $data['bounces'][$period];
            }
        }

        $lit = array();
        
        $lit['title']          = __('Sending Volume', self::WPDOMAIN);
        $lit['label_suffix']   = __(' emails', self::WPDOMAIN);
        $lit['Ylabel']         = __('Total Volume per Day', self::WPDOMAIN);
        
        $lit['last_few_days']  = __('in the last few days', self::WPDOMAIN);
        $lit['last_few_months']= __('in the last few months', self::WPDOMAIN);
        $lit['today']          = __('Today', self::WPDOMAIN);
        $lit['last7days']      = __('Last 7 Days', self::WPDOMAIN);
        $lit['last30days']     = __('Last 30 Days', self::WPDOMAIN);
        $lit['last60days']     = __('Last 60 Days', self::WPDOMAIN);
        $lit['last90days']     = __('Last 90 Days', self::WPDOMAIN);
        $lit['periods']        = __('Periods', self::WPDOMAIN);
        $lit['volume']         = __('Volume', self::WPDOMAIN);
        $lit['total']          = __('Total:', self::WPDOMAIN);
        $lit['unopened']       = __('Unopened', self::WPDOMAIN);
        $lit['bounced']        = __('Bounced or Rejected', self::WPDOMAIN);
        $lit['opened']         = __('Opened', self::WPDOMAIN);
        
        if ( $display == 'average' ) {
            $lit['title']            = __('Average Sending Volume', self::WPDOMAIN);
            $lit['label_suffix']    .= __('/day', self::WPDOMAIN);
            $lit['Ylabel']           = __('Average Volume per Day', self::WPDOMAIN);
            
            foreach ( array(1 => 'today', 7 => 'last_7_days') as $days => $period ) {
                    $data['opens'][$period]     = number_format($data['opens'][$period] / $days,2);
                    $data['bounces'][$period]   = number_format($data['bounces'][$period] / $days,2);
                    $data['unopens'][$period]   = number_format($data['unopens'][$period] / $days,2);
            }
        }        
        // Filling arrays for recent stats
            $unopens['recent']    = $data['unopens']['today']           . ',' . $data['unopens']['last_7_days'];
            $opens['recent']      = $data['opens']['today']             . ',' . $data['opens']['last_7_days'];
            $bounces['recent']    = $data['bounces']['today']           . ',' . $data['bounces']['last_7_days'];


        $js = '';
        if ( !$isAjaxCall ) {
            $js .= '<script type="text/javascript" src="'.plugins_url('/js/highcharts.js', __FILE__).'"></script>';
            $js .= '<script type="text/javascript" src="'.plugins_url('/js/modules/exporting.js', __FILE__).'"></script>';

            $js .= '
<div style="height:400px;">
    <div id="filtered_recent"></div>
</div>
<script type="text/javascript">
jQuery(document).bind( \'ready\', function() {
';
        }
        $js .= <<<JS
    jQuery(function () {
        var chart;
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'filtered_recent',
                zoomType: 'xy',
                type: 'column'
            },
            title: {
                text: '{$lit['title']}'
            },
            subtitle: {
                text: '{$lit['last_few_days']}'
            },
            xAxis: [{
                categories: ['{$lit['today']}','{$lit['last7days']}'],
                title: {
                    enabled: true,
                    text: '{$lit['periods']}',
                    style: {
                        fontWeight: 'normal'
                    }
            }
            }],
            yAxis: [{
                min: 0,
                title: {
                    text: '{$lit['Ylabel']} ',
                    style: {
                        color: '#4572A7'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +' {$lit['label_suffix']}';
                    },
                    style: {
                        color: '#4572A7'
                    }
                },
                stackLabels: {
				    enabled: true,
				    style: {
					    fontWeight: 'bold',
					    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
				    }
			    }
            }],
            tooltip: {
                formatter: function() {
                    return '<b>'+ this.x +'</b><br/>'+
					    this.series.name +': '+ this.y +'{$lit['label_suffix']}<br/>'+
					    '{$lit['total']} '+ this.point.stackTotal+'{$lit['label_suffix']}';
                }
            },
            legend: {
                align: 'right',
			    x: -20,
			    verticalAlign: 'top',
			    y: 40,
			    floating: true,
			    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColorSolid) || 'white',
			    borderColor: '#CCC',
			    borderWidth: 1,
			    shadow: false
            },
	        credits: {
		        enabled: false,
		        href: 'http://www.mandrillapp.com/',
		        text: 'MandrillApp.com'
	        },
            plotOptions: {
			    column: {
				    stacking: 'normal',
				    dataLabels: {
					    enabled: true,
					    color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
				    }
			    }
		    },
		    series: [{
			    name: '{$lit['unopened']}',
			    data: [{$unopens['recent']}]
		    }, {
			    name: '{$lit['bounced']}',
			    data: [{$bounces['recent']}]
		    }, {
			    name: '{$lit['opened']}',
			    data: [{$opens['recent']}]
		    }]
        });
    });
JS;

    if ( !$isAjaxCall ) {
        $js .= '
    });
</script>';
    }
    
    echo $js;
        
    if ( $isAjaxCall ) exit();
    
    }

    static function showDashboardWidgetOptions() {
        $stats = self::getCurrentStats();
        if ( empty($stats) ) {
	        echo '<p>' . __('There was a problem retrieving statistics.', self::WPDOMAIN) . '</p>';
	        return;
        }
        
        $widget_id = 'mandrill_widget';

        if ( function_exists('is_multisite') && is_multisite() )
        	$widget_options = get_site_option('dashboard_widget_options');
        else
    		$widget_options = get_option('dashboard_widget_options');
        
        if ( !$widget_options )
          $widget_options = array();

        if ( !isset($widget_options[$widget_id]) )
          $widget_options[$widget_id] = array();
        
        if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST) ) {
          $filter = $_POST['filter'];
          $display = $_POST['display'];
          
          $widget_options[$widget_id]['filter']     = $filter;
          $widget_options[$widget_id]['display']    = $display;
          update_option( 'dashboard_widget_options', $widget_options );
        }

        $filter = isset( $widget_options[$widget_id]['filter'] ) ? $widget_options[$widget_id]['filter'] : '';
        $display = isset( $widget_options[$widget_id]['display'] ) ? $widget_options[$widget_id]['display'] : '';
        ?>
        <label for="filter"><?php _e('Filter by:', self::WPDOMAIN); ?> </label>
    <select id="filter" name="filter">
        <option value="none" <?=selected($filter, 'none');?>><?php _e('No filter', self::WPDOMAIN); ?></option>
        <optgroup label="<?php _e('Sender:', self::WPDOMAIN); ?>">
            <?php 
                foreach ( array_keys($stats['stats']['hourly']['senders']) as $sender) {
                    echo '<option value="s:'.$sender.'" '.selected($filter, 's:'.$sender).'>'.$sender.'</option>';
                }
            ?>            
        </optgroup>
        <optgroup label="<?php _e('Tag:', self::WPDOMAIN); ?>">
            <?php 
                foreach ( array_keys($stats['stats']['hourly']['tags']['detailed_stats']) as $tag) {
                    echo '<option value="'.$tag.'" '.selected($filter, $tag).'>'.$tag.'</option>';
                }
            ?>            
        </optgroup>        
    </select>
    <label for="display"><?php _e('Display:', self::WPDOMAIN); ?> </label>
    <select id="display" name="display">
        <option value="volume" <?=selected($display, 'volume');?>><?php _e('Total Volume per Period', self::WPDOMAIN); ?></option>
        <option value="average" <?=selected($display, 'average');?>><?php _e('Average Volume per Period', self::WPDOMAIN); ?></option>
    </select><?php
    }
	
    static function getAjaxStats() {
        $stats = self::getCurrentStats();
        if ( empty($stats) ) {
	        exit();
        }
        
        $filter         = $_POST['filter'];
        $display        = $_POST['display'];
        
        if ( $filter == 'none' ) {
            $filter_type = 'account';
        } elseif ( substr($filter,0,2) == 's:' ) {
            $filter_type = 'senders';
            $filter = substr($filter,2);
        } else {
            $filter_type = 'tags';
        }
        
        $data = array();
        foreach ( array('today', 'last_7_days', 'last_30_days', 'last_60_days', 'last_90_days') as $period ) {
            if ( $filter_type == 'account' ) {
                $data['opens'][$period]     = $stats['stats']['periods'][$filter_type][$period]['unique_opens'];
                $data['bounces'][$period]   = $stats['stats']['periods'][$filter_type][$period]['hard_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period]['soft_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period]['rejects'];
                                                
                $data['unopens'][$period]   = $stats['stats']['periods'][$filter_type][$period]['sent'] - 
                                                $data['opens'][$period] - 
                                                $data['bounces'][$period];
            } else {
                $data['opens'][$period]     = $stats['stats']['periods'][$filter_type][$period][$filter]['unique_opens'];
                $data['bounces'][$period]   = $stats['stats']['periods'][$filter_type][$period][$filter]['hard_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period][$filter]['soft_bounces'] +
                                                $stats['stats']['periods'][$filter_type][$period][$filter]['rejects'];
                                                
                $data['unopens'][$period]   = $stats['stats']['periods'][$filter_type][$period][$filter]['sent'] - 
                                                $data['opens'][$period] - 
                                                $data['bounces'][$period];
            }
        }
        
        $lit = array();
        
        $lit['title']          = __('Sending Volume', self::WPDOMAIN);
        $lit['label_suffix']   = __(' emails', self::WPDOMAIN);
        $lit['Ylabel']         = __('Total Volume per Day', self::WPDOMAIN);
        
        $lit['last_few_days']  = __('in the last few days', self::WPDOMAIN);
        $lit['last_few_months']= __('in the last few months', self::WPDOMAIN);
        $lit['today']          = __('Today', self::WPDOMAIN);
        $lit['last7days']      = __('Last 7 Days', self::WPDOMAIN);
        $lit['last30days']     = __('Last 30 Days', self::WPDOMAIN);
        $lit['last60days']     = __('Last 60 Days', self::WPDOMAIN);
        $lit['last90days']     = __('Last 90 Days', self::WPDOMAIN);
        $lit['periods']        = __('Periods', self::WPDOMAIN);
        $lit['volume']         = __('Volume', self::WPDOMAIN);
        $lit['total']          = __('Total:', self::WPDOMAIN);
        $lit['unopened']       = __('Unopened', self::WPDOMAIN);
        $lit['bounced']        = __('Bounced or Rejected', self::WPDOMAIN);
        $lit['opened']         = __('Opened', self::WPDOMAIN);
        
        if ( $display == 'average' ) {
            $lit['title']            = __('Average Sending Volume', self::WPDOMAIN);
            $lit['label_suffix']    .= __('/day', self::WPDOMAIN);
            $lit['Ylabel']           = __('Average Volume per Day', self::WPDOMAIN);
            
            foreach ( array(1 => 'today', 7 => 'last_7_days', 30 => 'last_30_days', 60 => 'last_60_days', 90 => 'last_90_days') as $days => $period ) {
                    $data['opens'][$period]     = number_format($data['opens'][$period] / $days,2);
                    $data['bounces'][$period]   = number_format($data['bounces'][$period] / $days,2);
                    $data['unopens'][$period]   = number_format($data['unopens'][$period] / $days,2);
            }
        }
        
        // Filling arrays for recent stats
            $unopens['recent']    = $data['unopens']['today']           . ',' . $data['unopens']['last_7_days'];
            $opens['recent']      = $data['opens']['today']             . ',' . $data['opens']['last_7_days'];
            $bounces['recent']    = $data['bounces']['today']           . ',' . $data['bounces']['last_7_days'];

        // Filling arrays for older stats
            $unopens['oldest']    = $data['unopens']['last_30_days']    . ',' . $data['unopens']['last_60_days']    . ',' . $data['unopens']['last_90_days'];
            $opens['oldest']      = $data['opens']['last_30_days']      . ',' . $data['opens']['last_60_days']      . ',' . $data['opens']['last_90_days'];
            $bounces['oldest']    = $data['bounces']['last_30_days']    . ',' . $data['bounces']['last_60_days']    . ',' . $data['bounces']['last_90_days'];
        
        $js = <<<JS
jQuery(function () {
    var chart;
    chart = new Highcharts.Chart({
        chart: {
            renderTo: 'filtered_recent',
            zoomType: 'xy',
            type: 'column'
        },
        title: {
            text: '{$lit['title']}'
        },
        subtitle: {
            text: '{$lit['last_few_days']}'
        },
        xAxis: [{
            categories: ['{$lit['today']}','{$lit['last7days']}'],
            title: {
                enabled: true,
                text: '{$lit['periods']}',
                style: {
                    fontWeight: 'normal'
                }
        }
        }],
        yAxis: [{
            min: 0,
            title: {
                text: '{$lit['Ylabel']} ',
                style: {
                    color: '#4572A7'
                }
            },
            labels: {
                formatter: function() {
                    return this.value +' {$lit['label_suffix']}';
                },
                style: {
                    color: '#4572A7'
                }
            },
            stackLabels: {
				enabled: true,
				style: {
					fontWeight: 'bold',
					color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
				}
			}
        }],
        tooltip: {
            formatter: function() {
                return '<b>'+ this.x +'</b><br/>'+
					this.series.name +': '+ this.y +'{$lit['label_suffix']}<br/>'+
					'{$lit['total']} '+ this.point.stackTotal+'{$lit['label_suffix']}';
            }
        },
        legend: {
            align: 'right',
			x: -20,
			verticalAlign: 'top',
			y: 40,
			floating: true,
			backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColorSolid) || 'white',
			borderColor: '#CCC',
			borderWidth: 1,
			shadow: false
        },
	    credits: {
		    enabled: false,
		    href: "http://www.mandrillapp.com/",
		    text: "MandrillApp.com"
	    },
        plotOptions: {
			column: {
				stacking: 'normal',
				dataLabels: {
					enabled: true,
					color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
				}
			}
		},
		series: [{
			name: '{$lit['unopened']}',
			data: [{$unopens['recent']}]
		}, {
			name: '{$lit['bounced']}',
			data: [{$bounces['recent']}]
		}, {
			name: '{$lit['opened']}',
			data: [{$opens['recent']}]
		}]
    });
    chart = new Highcharts.Chart({
        chart: {
            renderTo: 'filtered_oldest',
            zoomType: 'xy',
            type: 'column'
        },
        title: {
            text: '{$lit['title']}'
        },
        subtitle: {
            text: '{$lit['last_few_months']}'
        },
        xAxis: [{
            categories: ['{$lit['last30days']}','{$lit['last60days']}','{$lit['last90days']}'],
            title: {
                enabled: true,
                text: '{$lit['periods']}',
                style: {
                    fontWeight: 'normal'
                }
        }
        }],
        yAxis: [{
            min: 0,
            title: {
                text: '{$lit['Ylabel']} ',
                style: {
                    color: '#4572A7'
                }
            },
            labels: {
                formatter: function() {
                    return this.value +' {$lit['label_suffix']}';
                },
                style: {
                    color: '#4572A7'
                }
            },
            stackLabels: {
				enabled: true,
				style: {
					fontWeight: 'bold',
					color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
				}
			}
        }],
        tooltip: {
            formatter: function() {
                return '<b>'+ this.x +'</b><br/>'+
					this.series.name +': '+ this.y +'{$lit['label_suffix']}<br/>'+
					'{$lit['total']} '+ this.point.stackTotal+'{$lit['label_suffix']}';
            }
        },
        legend: {
            align: 'right',
			x: -20,
			verticalAlign: 'top',
			y: 40,
			floating: true,
			backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColorSolid) || 'white',
			borderColor: '#CCC',
			borderWidth: 1,
			shadow: false
        },
	    credits: {
		    enabled: false,
		    href: "http://www.mandrillapp.com/",
		    text: "MandrillApp.com"
	    },
        plotOptions: {
			column: {
				stacking: 'normal',
				dataLabels: {
					enabled: true,
					color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
				}
			}
		},
		series: [{
			name: '{$lit['unopened']}',
			data: [{$unopens['oldest']}]
		}, {
			name: '{$lit['bounced']}',
			data: [{$bounces['oldest']}]
		}, {
			name: '{$lit['opened']}',
			data: [{$opens['oldest']}]
		}]
    });
});
JS;
        echo $js;
                
        exit();
    }
    

/******************************************************************
**  Function to actually send the emails
*******************************************************************
	/**
	 * @param string|array $to recipients, array or comma-separated string
	 * @param string $subject email subject
	 * @param string $html email body
	 * @param string|array $headers array or comma-separated string with additional headers for the email
	 * @param array $attachments Array of paths for the files to be attached to the message.
	 * @param array $tags Array of tags to be attached to the message.
	 * @param string $from_name the name to use in the From field of the message
	 * @param string $from_email a valid email address to use with this account
	 * @param string $template_name a valid template name for the account
	 * @return array|WP_Error
	 */
	static function mail( $to, $subject, $html, $headers = '', $attachments = array(), $tags = array(), $from_name = '', $from_email = '', $template_name = '' ) {
        try {
            $message = compact('html', 'text', 'subject', 'from_name', 'from_email', 'to', 'headers', 'attachments');
            return self::sendEmail($message, $tags, $template_name);
        } catch ( Exception $e ) {
            return new WP_Error( __($e->getMessage(), self::WPDOMAIN) );
        }
    }

	/**
	 * @return boolean
	 */
	static function wp_mail_native( $to, $subject, $message, $headers = '', $attachments = array() ) {
		require plugin_dir_path( __FILE__ ) . '/legacy/function.wp_mail.php';
	}

	/**
	 * @link https://mandrillapp.com/api/docs/messages.html#method=send
	 *
	 * @param array $message
	 * @param boolean $track_opens
	 * @param boolean $track_clicks
	 * @param array $tags
	 * @return array|WP_Error
	 */
	static function sendEmail( $message, $tags = array(), $template_name = '', $track_opens = true, $track_clicks = true ) {
	
	    try {
	        // Checking if we are connected to Mandrill
	        if ( !self::isConnected() ) throw new Exception('Invalid API Key');
	        
	        /************
	        *
	        *  Processing supplied fields to make them valid for the Mandrill API
	        *
	        *************************/ 
	        	        
		    // Checking the user-specified headers
	            if ( empty( $message['headers'] ) ) {
		            $message['headers'] = array();
	            } else {
		            if ( !is_array( $message['headers'] ) ) {
			            $tempheaders = explode( "\n", str_replace( "\r\n", "\n", $message['headers'] ) );
		            } else {
			            $tempheaders = $message['headers'];
		            }
		            $message['headers'] = array();

		            // If it's actually got contents
		            if ( !empty( $tempheaders ) ) {
			            // Iterate through the raw headers
			            foreach ( (array) $tempheaders as $header ) {
				            if ( strpos($header, ':') === false ) continue;

				            // Explode them out
				            list( $name, $content ) = explode( ':', trim( $header ), 2 );

				            // Cleanup crew
				            $name    = trim( $name    );
				            $content = trim( $content );

				            switch ( strtolower( $name ) ) {
					            case 'from':
						            if ( strpos($content, '<' ) !== false ) {
							            // So... making my life hard again?
							            $from_name = substr( $content, 0, strpos( $content, '<' ) - 1 );
							            $from_name = str_replace( '"', '', $from_name );
							            $from_name = trim( $from_name );

							            $from_email = substr( $content, strpos( $content, '<' ) + 1 );
							            $from_email = str_replace( '>', '', $from_email );
							            $from_email = trim( $from_email );
						            } else {
							            $from_name  = '';
							            $from_email = trim( $content );
						            }
						            $message['from_email']  = $from_email;
						            $message['from_name']   = $from_name;						            
						            break;
						            
					            case 'bcc':
					                // Note: Mandrill's API only accept one BCC address. The other addresses supplied will be silently discarted
					                $bcc = array_merge( (array) $bcc, explode( ',', $content ) );
					                
					                $message['bcc_address'] = $bcc[0];
						            break;
						            
					            case 'reply-to':
						            $message['headers'][trim( $name )] = trim( $content );
						            break;
						            
					            default:
					                if ( substr($name,0,2) == 'x-' ) {
    						            $message['headers'][trim( $name )] = trim( $content );
    						        }
						            break;
				            }
			            }
		            }
                }

	        // Checking the To: field
                if( !is_array($message['to']) ) $message['to'] = explode(',', $message['to']);
                
                $processed_to = array();
                foreach ( $message['to'] as $email ) {
                    $processed_to[] = array( 'email' => $email );
                }
                $message['to'] = $processed_to;
	        
	        // Checking the From: field
                if ( empty($message['from_email']) ) $message['from_email'] = self::getFromEmail();
                if ( empty($message['from_name'] ) ) $message['from_name']  = self::getFromName();
                
                list($dummy,$domain) = explode('@', $message['from_email']);
                if ( !self::isDomainEnabled( $domain ) ) 
                    throw new Exception('The domain of the email you provided has not been verified by Mandrill.');
            
            // Chechking the tags.
    		    $message['tags']        = self::findTags($tags);
		    
		    // Checking the attachments
                $message['attachments'] = self::processAttachments($message['attachments']);

		    // Default values for other parameters
                $message['auto_text']   = true;
                $message['track_opens'] = $track_opens;
                $message['track_clicks']= $track_clicks;
                
            // Common transformations for the HTML part
                $message['html'] = nl2br($message['html']);
                
            // Defining template to use            
            
                $template = '';
                // If user specified a given template, check if it is valid for this Mandrill account
                if ( !empty($template_name) && self::isTemplateValid($template_name) ) {
                    $template = $template_name;
                } else {
                    $template  = self::getTemplate();   // If no template was specified or the specified was invalid, use the general one.
                }
                
                if ( $template ) {
                    $template_content = array( array('name' => 'main', 'content' => $message['html']) );

                    $message['html']                = '';
                    $message['template']['name']    = $template;
                    $message['template']['content'] = $template_content;
                }
                
            // Letting the user filter/change the message payload
            $message  = apply_filters('mandrill_payload', $message);
                
            // Setting the tags property correctly to be received by the Mandrill's API
                if ( !is_array($message['tags']['user']) )      $message['tags']['user']        = array();
                if ( !is_array($message['tags']['general']) )   $message['tags']['general']     = array();
                if ( !is_array($message['tags']['automatic']) ) $message['tags']['automatic']   = array();
                
                $message['tags'] = array_merge( $message['tags']['user'], $message['tags']['general'], $message['tags']['automatic'] );
                
            // Sending the message
                if ( empty($message['template'])  || empty($message['template']['name'])  || empty($message['template']['content']) ) {
        	        return self::$mandrill->messages_send($message);
                } else {
                    $template           = $message['template']['name'];
                    $template_content   = $message['template']['content'];                    
                    unset($message['template']);
                    
        	        return self::$mandrill->messages_send_template($template, $template_content, $message);
                }
            
	    } catch ( Exception $e) {
			return new WP_Error( $e->getMessage() );
	    }
	}

    static function processAttachments($attachments) {
        if ( !is_array($attachments) )
	        $attachments = explode( "\n", str_replace( "\r\n", "\n", $attachments ) );
	        
        foreach ( $attachments as $index => $attachment ) {
            try {
                $attachments[$index] = Mandrill::getAttachmentStruct($attachment);
            } catch ( Exception $e ) {
                return new WP_Error( $e->getMessage() );
            }
        }
        
        return $attachments;
    }

}
?>
